import {browser, by, element, ExpectedConditions} from "protractor";

export namespace LocateVulnerability {
    export const codeMirrorPane = element(by.className('CodeMirror-code')),
        sourceTreeItem = '.sourceTreeItem',
        nextButton = element(by.buttonText('Next')),
        continueButton = element(by.buttonText('Continue')),
        line53 = element.all(by.id('codehunk-5c9a46c804d5c31e2e134650')).first();

    export async function clickVulnerabilityByLineNumber(lineNumber: string) {
        //TODO replace with better locator
        await browser.wait(ExpectedConditions.presenceOf(line53), 20000, 'Line not found');
        await browser.executeScript('arguments[0].scrollIntoView()', line53.getWebElement());
        await line53.click();
    }

    export async function clickSourceTreeItem(item: string) {
        await browser.wait(ExpectedConditions.elementToBeClickable(element(by.cssContainingText(sourceTreeItem, item))), 10000, 'File not found');
        //TODO click takes place before screen is fully rendered so sometimes this method doesn't work ;-(
        await browser.sleep(1000);
        await element(by.cssContainingText(sourceTreeItem, item)).click();
    }

    export async function clickNextButton() {
        await browser.wait(ExpectedConditions.elementToBeClickable(nextButton), 10000, 'Next button not clickable');
        await nextButton.click();
    }
}
